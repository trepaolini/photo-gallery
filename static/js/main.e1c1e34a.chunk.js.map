{"version":3,"sources":["Gallery.jsx","App.js","serviceWorker.js","index.js"],"names":["Gallery","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","controlAutoplay","active","setState","intervalFunction","setInterval","forward","clearInterval","state","toggle","modal","autoplay","currIndex","photos","length","backward","bind","assertThisInitialized","inherits","createClass","key","value","_this2","react_default","a","createElement","reactstrap_es","className","map","photo","i","sm","md","onClick","src","alt","size","isOpen","tabIndex","react_fontawesome_index_es","icon","xs","offset","check","inline","type","onChange","id","for","href","target","rel","download","Component","library","add","faAngleRight","faAngleLeft","App","loading","error","width","height","grayscale","baseURL","getImages","isLoading","fetch","then","response","ok","json","Error","data","photoUrls","url","filter","author","forEach","push","toString","catch","_this3","message","Gallery_Gallery","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e1c1e34a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\n// Reactstrap Components\nimport {\n  Container,\n  Row,\n  Col,\n  Modal,\n  ModalBody,\n  Form,\n  FormGroup,\n  Label,\n  Input\n} from \"reactstrap\";\n\n// FontAwesome Components\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport \"./gallery.css\";\n\nexport class Gallery extends Component {\n  // This constrctor keeps track of the galleries changeable states:\n  // If the modal is open or closed, the current index for the picture in the modal,\n  // if the autoplay feature is activated, and which interval function is controling the\n  // modal's autoplay feature\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      modal: false,\n      currIndex: 0,\n      autoplay: false,\n      intervalFunction: null\n    };\n\n    this.toggle = this.toggle.bind(this);\n  }\n\n  // This function controls the autoplay feature by starting and clearing a set interval,\n  // depending on if the autoplay option is checked or unchecked\n  controlAutoplay = active => {\n    if (active) {\n      this.setState({ intervalFunction: setInterval(this.forward, 1500) });\n    } else {\n      clearInterval(this.state.intervalFunction);\n    }\n  };\n\n  // This function toggles the modal to open or close, as well as reset the autoplay feature\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal,\n      autoplay: false\n    });\n    clearInterval(this.state.intervalFunction);\n  };\n\n  // This method will move the carousel onto the next photo once the right arrow is click\n  forward = () => {\n    // Resets the carousel if moving forward on the last photo\n    if (this.state.currIndex === this.props.photos.length - 1) {\n      return this.setState(state => ({\n        currIndex: 0\n      }));\n    }\n\n    this.setState(state => ({\n      currIndex: state.currIndex + 1\n    }));\n  };\n\n  // This method will move the carousel backwards to the previous photo when the left arrow is clicked\n  backward = () => {\n    // Moves to the last photo in the set if going backward from the start\n    if (this.state.currIndex === 0) {\n      return this.setState({\n        currIndex: this.props.photos.length - 1\n      });\n    }\n\n    this.setState(state => ({\n      currIndex: state.currIndex - 1\n    }));\n  };\n\n  // Renders the photo gallery, which contains the list of photos, the modal that allows\n  // users to move through the photos, a checkbox to control the autoplay feature,\n  // and a button to download the full image\n  render() {\n    return (\n      <Container className=\"galleryContainer\">\n        <Row>\n          {this.props.photos.map((photo, i) => (\n            <Col\n              className=\"galleryCol\"\n              key={i}\n              sm=\"12\"\n              md=\"3\"\n              // Could not get accessibility worked out in this iteration due to lack of time\n              // role=\"button\"\n              // aria-pressed=\"false\"\n              // tabIndex=\"0\"\n            >\n              {/* Images open up a enlarged modal view when clicked */}\n              <img\n                className=\"galleryPhoto\"\n                onClick={() => {\n                  this.setState({ currIndex: i });\n                  this.toggle();\n                }}\n                key={i}\n                src={photo}\n                alt=\"Taken by Alejandro Escamilla\"\n              />\n            </Col>\n          ))}\n        </Row>\n        {/* This modal opens up when an photo is clicked It allows for users to move\n        forward and backwards through the photos by click */}\n        <Modal\n          size=\"xl\"\n          className={this.props.className}\n          isOpen={this.state.modal}\n          toggle={this.toggle}\n          tabIndex=\"-1\"\n        >\n          <Container className=\"modalStyle\">\n            <ModalBody>\n              <Col>\n                <img\n                  className=\"modalPhoto\"\n                  src={this.props.photos[this.state.currIndex]}\n                  alt=\"Taken by Alejandro Escamilla\"\n                />\n              </Col>\n            </ModalBody>\n            <Row>\n              <Col\n                // tabIndex=\"0\"\n                // role=\"button\"\n                // aria-pressed=\"false\"\n                onClick={this.backward}\n                className=\"backwardCol\"\n              >\n                <FontAwesomeIcon icon=\"angle-left\" className=\"backwardArrow\" />\n              </Col>\n              <Col\n                // tabIndex=\"0\"\n                // role=\"button\"\n                // aria-pressed=\"false\"\n                onClick={this.forward}\n                className=\"forwardCol\"\n              >\n                <FontAwesomeIcon icon=\"angle-right\" className=\"forwardArrow\" />\n              </Col>\n            </Row>\n            <Row>\n              <Col xs={{ size: 4, offset: 4 }}>\n                <Form className=\"checkboxes autoplay\">\n                  <FormGroup className=\"checkbox\" check inline>\n                    <Input\n                      type=\"checkbox\"\n                      className=\"checkbox\"\n                      onChange={() => {\n                        this.controlAutoplay(!this.state.autoplay);\n                        this.setState({ autoplay: !this.state.autoplay });\n                      }}\n                      id=\"autoplay\"\n                    />\n                    <Label for=\"autoplay\" check>\n                      Autoplay\n                    </Label>\n                  </FormGroup>\n                </Form>\n              </Col>\n            </Row>\n            <Row>\n              <Col xs={{ size: 4, offset: 4 }} className=\"buttonCol\">\n                <a\n                  href={this.props.photos[this.state.currIndex]}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  download\n                >\n                  <button className=\"button\"> Download </button>\n                </a>\n              </Col>\n            </Row>\n          </Container>\n        </Modal>\n      </Container>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\n// FontAwesome Components(for arrow icons)\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faAngleRight, faAngleLeft } from \"@fortawesome/free-solid-svg-icons\";\n\n// Reactstrap Components\nimport { Form, FormGroup, Label, Input, Container, Row, Col } from \"reactstrap\";\n\n// Gallery Component\nimport { Gallery } from \"./Gallery\";\nlibrary.add(faAngleRight, faAngleLeft);\n\n// This app is an interactive photo gallery for photos taken from the Lorem Picum API\n\n// The root App Compenent holds all the information for the app and gets picture information from the\n// Lorem Picsum API\n\n// The Gallery component holds most of the interactivity of this app, including creating the photos\n// and allow users to enlarge and click through photos in the gallery.\nclass App extends Component {\n  // This constructor creates the apps state, which keeps track of\n  // most of the apps changeable content, such as the photos for the gallery,\n  // any errors that come up, and user input like the grayscale option\n\n  // Width and height cannot be changed in this iteration of the app due to lack of\n  // available time to properly test and integrate\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      photos: [],\n      loading: false,\n      error: null,\n      width: 600,\n      height: 600,\n      grayscale: false,\n      baseURL: \"https://picsum.photos/\"\n    };\n  }\n\n  // When the app is ready, load in the photos and show an error/lodaing screen if unavailable\n  componentDidMount() {\n    this.getImages();\n  }\n\n  // This function gets images from the Lorem Picsum API, first getting a JSON list of all\n  // all the images then filtering out the id numbers of each photo and then saving the direct image\n  // url for each photo to be used in the gallery.\n\n  // If the user has chosen the grayscale option, the API call will receive grayscale versions of the photos\n  getImages() {\n    this.setState({ isLoading: true });\n    fetch(\"https://picsum.photos/list\")\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error(\"Could not load the images, please try again.\");\n        }\n      })\n      .then(data => {\n        let photoUrls = [];\n        let url = this.state.baseURL;\n\n        if (this.state.grayscale) {\n          url += \"g/\";\n        }\n\n        url += this.state.width + \"/\" + this.state.height + \"?image=\";\n\n        data\n          .filter(photo => photo.author === \"Alejandro Escamilla\")\n          .forEach(photo => {\n            photoUrls.push(url + photo.id.toString());\n          });\n        this.setState({ photos: photoUrls });\n      })\n      .catch(error => this.setState({ error, loading: false }));\n  }\n\n  // Renders the web page, giving a loading or error message if the page does not load correctly\n  // Includes 4 major content areas: A title, an introduction paragraph, a checkbox for grayscale, and the photo gallery\n  render() {\n    if (this.state.error) {\n      return (\n        <p>\n          Unfortunately, an error has occured. Please make sure you are\n          connected to the internet. Here is the error message:{\" \"}\n          {this.state.error.message}\n        </p>\n      );\n    }\n\n    if (this.state.loading) {\n      return <p>Loading... (Thanks for being patient)</p>;\n    }\n\n    return (\n      <Container>\n        <header className=\"header\">\n          <h1>Photographer Spotlight: Alejandro Escamilla</h1>\n        </header>\n        <Container>\n          <p className=\"introduction \">\n            This interactive gallery showcases the works of Allejandro\n            Escamilla, whose photography ranges from quaint displays of phones\n            and laptops to brooding images of forks and shoes.\n          </p>\n          <Row>\n            <Col xs={{ size: 4, offset: 4 }}>\n              <Form className=\"checkboxes\">\n                <FormGroup className=\"checkbox\" check inline>\n                  <Input\n                    type=\"checkbox\"\n                    className=\"checkbox\"\n                    onChange={() => {\n                      this.setState({ grayscale: !this.state.grayscale });\n                      this.getImages();\n                    }}\n                    id=\"grayscale\"\n                  />\n                  <Label for=\"grayscale\" check>\n                    Change Images to Grayscale\n                  </Label>\n                </FormGroup>\n              </Form>\n            </Col>\n          </Row>\n        </Container>\n        <Container>\n          <Gallery photos={this.state.photos} />\n        </Container>\n        <footer> &copy; 2018: Tre Paolini </footer>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}